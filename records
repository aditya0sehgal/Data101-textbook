{"Section":{"0":1,"1":3,"2":4,"3":5,"4":6,"5":7,"6":8,"7":9,"8":11,"9":12,"10":13},"Name":{"0":"Montone Queries - 3 liners","1":"Aggregate Queries","2":"Outer Joins","3":"Conditional","4":"String matching","5":"Election Data Queries","6":"Performance and  Indexing","7":"Updates\/Insertions\/Deletions","8":"MongoDb - Simple Queries","9":"R code samples","10":"Python code samples"},"Details":{"0":"How to create simple, montone, 3-liner queries \nFrequent question I get is \"How do I start writing SQL query?\". \nFirst see if this is montone or nonmonotonic query?  Why? Because if is monotone, you can do it via simple 3-liner SQL query Select-From-Where. If it is nonmonotonic, it is likely you will have to use subquery with NOT EXISTS, or outer join.\n Lets assume that you query is monotonic (we talked about simple test for this in class). In such case first you have to see which relations belong to the FROM clause. Read the query and see which verbs and nouns are used there and which correspond to relations in your database. For example, take the query \nQ= \u2018 Drinkers who frequent a bar which sells some beer that they like and is priced above $10\u2019                                              \nWhat relations are participating in SQL query corresponding to Q? \nThese are:  Frequents, Sells and Likes. So we know it will be\nFROM Frequents, Sells, Likes\nNow, we have to add the matching conditions to WHERE conditions. Frequents have to match Sells on bar, Likes has to match Frequents on drinker and Sells on beer. These conditions look like this\nLikes.drinker=Frequents.drinker\nIn addition the matching conditions we have to add additional condition on price:\nSell.price >10. \nAll in all, WHERE condition is a conjunction of 4 conditions: three matching conditions for the 3-way join and one specific constraint on price.\nFinally we need to come up with target clause for SELECT clause. What are we supposed to return?  It is Drinkers, which is Frequents.drinker. But we should add distinct to make sure that we do have duplicates of drinkers returned. \n\nThis finalizes our query!  It is:\nselect distinct f.drinker from Frequents f, Likes l, Sells s where f.drinker=l.drinker and s.bar=f.bar and l.beer=s.beer and s.price >10;\n\n After few practice queries, you will be able to form simple three liner queries just following this simple script.","1":"Critical in data analytics","2":"Nonmonotonic queries using outer joins and other uses of outer joins","3":"Using SQL Target line with CASE, IF etc","4":"Using SQL Target line to process strings","5":"These  is real data from 2020 presidential election from parts of Pennsylvania (table Penna)","6":"How fast is your query and how to speed it up?","7":"Modifications of tables","8":"Welcome to nosql. For below queries please use the database name as 'db'.","9":"welcome to r","10":"Welcome to python"},"Snippets":{"0":[{"Query":"SELECT * FROM Beers WHERE manf = 'Anheuser-Busch';","Result":null,"Title":"Find all beers manufactured by Anheuser-Busch","Type":null,"Width":null},{"Query":"SELECT name AS beer, manf FROM Beers WHERE manf = 'Anheuser-Busch';","Result":null,"Title":"Renaming column 'name'","Type":null,"Width":null},{"Query":"SELECT bar, beer, price*142 As priceInYen FROM Sells","Result":null,"Title":"Find beer prices in Yen","Type":null,"Width":null},{"Query":"SELECT price FROM Sells WHERE bar = 'Caravan' AND beer = 'Budweiser'","Result":null,"Title":"What does Caravan bar charge for Budweiser","Type":null,"Width":null},{"Query":"SELECT name FROM Drinkers WHERE phone LIKE '917-%'","Result":null,"Title":"Drinkers with phone number from area code 917","Type":null,"Width":null},{"Query":"SELECT distinct  beer FROM Likes, Frequents WHERE bar = 'Caravan' AND Frequents.drinker = Likes.drinker;","Result":null,"Title":"Find beers which are liked by drinkers who frequent Caravan","Type":null,"Width":null},{"Query":"Select  distinct L.beer From Likes L JOIN Frequents F on L.drinker=F.drinker Where F.bar='Caravan'","Result":null,"Title":"Beers which are liked by at least one drinker who frequents Caravan","Type":null,"Width":null},{"Query":"Select  distinct L1.drinker from Likes L1,Likes L2 where L1.drinker=L2.drinker and not(L1.beer =L2.beer);","Result":null,"Title":"Drinkers who like at least two beers","Type":null,"Width":null},{"Query":"Select * from Likes order by drinker","Result":null,"Title":"Verification query: Drinkers who like at least two beers","Type":null,"Width":null},{"Query":"SELECT beer FROM Likes, (SELECT drinker FROM Frequents WHERE bar = 'Caravan')JD WHERE Likes.drinker = JD.drinker","Result":null,"Title":"Beers which are liked by at least one drinker who frequents Caravan","Type":null,"Width":null},{"Query":"SELECT * FROM Beers WHERE name IN (SELECT beer FROM Likes WHERE drinker = 'Mike');","Result":null,"Title":"Beers which are liked by Mike","Type":null,"Width":null},{"Query":"SELECT b.name FROM Bars b WHERE NOT EXISTS (SELECT * FROM Frequents f WHERE f.bar= b.name)","Result":null,"Title":"Names of bars which are not frequented by anyone","Type":null,"Width":null},{"Query":"select distinct g.drinker from  Frequents f, Frequents g, Drinkers d where f.bar=g.bar and d.name =f.drinker and d.city ='Edison';","Result":null,"Title":"Drinkers who frequent a bar which is frequented by a drinker from Edison","Type":null,"Width":null},{"Query":"select f.bar, count(distinct d.city) as Cities from Drinkers d, Frequents f\nwhere d.name=f.drinker\ngroup by f.bar\norder by Cities desc ","Result":null,"Title":"Order bars by number of cities that drinkers who frequent these bars come from ","Type":null,"Width":null},{"Query":"select distinct f.drinker from  Frequents f, Likes l, Sells s\nwhere f.drinker=l.drinker and s.bar=f.bar and l.beer=s.beer and s.price >10;","Result":null,"Title":"Drinkers who frequent a bar which sells some beer that they like and is priced above $10 ","Type":null,"Width":null}],"1":[{"Query":"Select bar, count(*) as number_of_beers from Sells group by bar order by number_of_beers  desc","Result":null,"Title":"Ranked list of bars by number of beers they sell","Type":null,"Width":null},{"Query":"select s.beer, s.price from Sells s\nwhere 0= (select count(*) from Sells s1 where s1.price > s.price) and price is not NULL","Result":null,"Title":"Most expensive beer (with ties)","Type":null,"Width":null},{"Query":"select s.beer, s.price from Sells s\nwhere 7= (select count(*) from Sells s1 where s1.price > s.price)","Result":null,"Title":"8th most expensive beer","Type":null,"Width":null},{"Query":"select bar, count(*) as beernumber  from Sells\ngroup by bar\nhaving beernumber <3","Result":null,"Title":"Bars selling less than 3 beers","Type":null,"Width":null},{"Query":"select s.* from Sells s\nwhere s.beer='Budweiser' and  \n0= (select count(*) from Sells \ns1 where s1.price > s.price and \ns1.beer='Budweiser') ","Result":null,"Title":"Most expensive Budweiser","Type":null,"Width":null},{"Query":"select * from Likes l\nwhere 1=(select count(*) from Likes l1 where l1.drinker = l.drinker) and l.beer=\"Hefeweizen\"","Result":null,"Title":"Drinkers who like only Hefeweizen (using aggregates)","Type":null,"Width":null},{"Query":"select drinker, count(*) as c  from Likes\ngroup by drinker\nhaving c = (select count(*) from Beers)","Result":null,"Title":"Drinkers who like all beers ","Type":null,"Width":null},{"Query":"select f.bar, count(distinct d.city) as Cities from Drinkers d, Frequents f\nwhere d.name=f.drinker\ngroup by f.bar\nhaving Cities >5","Result":null,"Title":"Bars which are frequented by drinkers from more than 5 cities","Type":null,"Width":null},{"Query":"select s.bar, avg(price) as meanprice from Sells s, Likes l, Drinkers d\nwhere s.beer=l.beer and d.name=l.drinker and d.city='New York'\ngroup by bar\nhaving meanprice >5\norder by meanprice desc","Result":null,"Title":"Bars which on average charge more than $5 per beers which are liked by New York City patrons","Type":null,"Width":null},{"Query":"select drinker from Likes l\nwhere not exists(\nselect *\nfrom Likes l1\nwhere l1.drinker = l.drinker and l1.beer not in (select beer from Sells group by beer having max(price)<6)\n);\n","Result":null,"Title":"Drinkers who like only beers priced below $6 in any bar ","Type":null,"Width":null},{"Query":"select distinct d.name from  Drinkers d, Frequents h\nwhere d.name = h.drinker and NOT EXISTS (select * from Drinkers d1, Bars b, Frequents f where d1.name=f.drinker and b.name=f.bar and b.city!=d1.city and d.name=d1.name);","Result":null,"Title":"Drinkers who frequent only bars in the located in same city that they live","Type":null,"Width":null},{"Query":"select s.* from Sells s\nwhere s.price = (select min(price) from Sells s1 where s.beer=s1.beer)","Result":null,"Title":"Bars and beers  and their lowest prices (for which this bars charge the least)","Type":null,"Width":null},{"Query":"select  f.bar, count(distinct f.drinker) as SameCity from  Frequents f, Drinkers d, Bars b\nwhere f.drinker =d.name and f.bar=b.name and b.city=d.city\ngroup by f.bar\norder by SameCity desc;","Result":null,"Title":"Bars ordered by number of drinkers who are located in the same city as the bar","Type":null,"Width":null}],"2":[{"Query":"select *  from Drinkers join Likes on Likes.drinker=Drinkers.name","Result":null,"Title":"Natural join - vs outer join","Type":null,"Width":null},{"Query":"select *  from Drinkers left join Likes on Likes.drinker=Drinkers.name","Result":null,"Title":"Left join demonstration","Type":null,"Width":null},{"Query":"select * from Frequents f  left join Sells s on f.bar=s.bar","Result":null,"Title":"More outer joins","Type":null,"Width":null},{"Query":"select * from  Likes l  left join Sells s on l.beer=s.beer","Result":null,"Title":"More outer joins","Type":null,"Width":null},{"Query":"select * from Beers b left join Likes l on l.beer = b.name","Result":null,"Title":"More outerjoins","Type":null,"Width":null},{"Query":"select distinct name from Drinkers d left join Likes l on d.name=l.drinker where l.drinker is NULL","Result":null,"Title":"Drinkers who do not like any beers ","Type":null,"Width":null},{"Query":"select distinct d.name  from Drinkers d left join (select f.drinker from Likes f where f.beer='Bud') a  on d.name=a.drinker where a.drinker IS NULL","Result":null,"Title":"Drinkers who do not like \u201cBud\u201d","Type":null,"Width":null},{"Query":"select d.name from Drinkers d left join (select f.drinker from Likes f where f.beer !=\"Bud\")a  on d.name=a.drinker where a.drinker IS NULL","Result":null,"Title":"Drinkers who like only \u201cBud\u201d or no beer at all. ","Type":null,"Width":null},{"Query":"select distinct b.name from Bars b left join (select s.bar from Sells s where s.price >5) a  on a.bar=b.name where a.bar IS NULL","Result":null,"Title":"Bars which sell no beer above $5  (or no beer at all!)","Type":null,"Width":null},{"Query":"select a.bar from Frequents f right join (select s.bar from Sells s where s.beer='Hefeweizen Doppelbock') \na  on a.bar=f.bar where f.drinker is null","Result":null,"Title":"Bars which sell Hefeweizen Doppelbock  and are not frequented by any drinker","Type":null,"Width":null},{"Query":"select distinct f.drinker from  Frequents f left join (select s.bar from Sells s where \ns.beer='Hefeweizen Doppelbock') a  on a.bar=f.bar where a.bar is null","Result":null,"Title":"Drinkers who  frequent some bars which do not sell Hefeweizen Doppelbock","Type":null,"Width":null}],"3":[{"Query":"select bar, beer, (CASE\n    WHEN price > 8 THEN 'Expensive'\n    WHEN price >6 and price <=8 THEN 'Moderate' \n    WHEN price <=6 THEN 'Cheap' END) as price_category from Sells \n       ","Result":null,"Title":"Using Case statement in target line of SQL query","Type":null,"Width":null},{"Query":"SELECT bar, beer, IF(price>10, \"Very Expensive\", \"Reasonable\") as price_gauge\nFROM Sells","Result":null,"Title":"Using IF() in target like of SQL query","Type":null,"Width":null},{"Query":"SELECT DISTINCT 'Yes' as \"nonempty\"\r\nFROM Likes L\r\nWHERE EXISTS (SELECT beer, count(beer) as Beer_Count\r\n\t    FROM Likes L\r\n\t    GROUP BY beer\r\n\t    HAVING Beer_Count= (SELECT count(DISTINCT Drinkers.name) FROM Drinkers))\r\nUNION\r\nSELECT DISTINCT 'No' as \"nonempty\"\r\nFROM Likes L1\r\nWHERE NOT EXISTS (SELECT beer, count(beer) as Beer_Count\r\n\t                   FROM Likes L\r\n\t                  GROUP BY beer\r\n\t                  HAVING Beer_Count= (SELECT count(DISTINCT Drinkers.name) FROM Drinkers));\r\n\r\n","Result":null,"Title":"Query which \r returns \"Yes\" if there is any \r\r\nbeer which all drinkers like, \rand \"No\" otherwise.","Type":null,"Width":null},{"Query":"SELECT nam.beer\r\nFROM(select distinct beer, count(beer) as A\r\n\t\tFROM Likes L1\r\n\t\tGROUP BY (beer)\r\n\t\tHAVING A= (SELECT COUNT(DISTINCT Drinkers.name)\r\n\t\tFROM Drinkers) AND\r\n\t\tEXISTS(SELECT beer, COUNT(beer) as A\r\n\t\t\tFROM Likes L1\r\n\t\t\tGROUP BY (beer)\r\n\t\t\tHAVING A= (SELECT COUNT(DISTINCT Drinkers.name)\r\n\t\t\tFROM Drinkers))) AS nam\r\nUNION\r\nselect distinct 'No such a beer exists' as 'nonempty'  from Likes L2 where NOT EXISTS(SELECT beer, COUNT(beer) as A\r\nFROM Likes L1\r\nGROUP BY (beer)\r\nHAVING A= (SELECT COUNT(DISTINCT Drinkers.name)\r\nFROM Drinkers));\r\n\r\n","Result":null,"Title":"Query which returns a beer which every drinker likes or\rif there is no such beer,  \"No such a beer \r\r\nexists\"","Type":null,"Width":null}],"4":[{"Query":"SELECT SUBSTRING_INDEX('imielins@cs.rutgers.edu', '@', 1) as result;","Result":null,"Title":"Extract user name ('imielins')","Type":null,"Width":null},{"Query":"SELECT SUBSTRING_INDEX('imielins@cs.rutgers.edu', '.', -2) as result;","Result":null,"Title":"Extract domain name ('rutgers.edu')","Type":null,"Width":null},{"Query":"SELECT SUBSTRING_INDEX('imielins@cs.rutgers.edu', '@', -1) as result;","Result":null,"Title":"Extract subdomain name ('cs.rutgers.edu')","Type":null,"Width":null},{"Query":"SELECT SUBSTRING_INDEX(SUBSTRING_INDEX('imielins@cs.rutgers.edu', '@', -1), '.', 1) as result;","Result":null,"Title":"Extract just 'cs' (between '@' and '.')","Type":null,"Width":null},{"Query":"SELECT name, SUBSTRING(license, 1, 2) AS State from Bars; ","Result":null,"Title":"Extract first two characters from licence attribute - that is State initials","Type":null,"Width":null},{"Query":"select Concat(Bar ,' sells ', Beer, ' at ','$', price) as InEnglish from Sells ","Result":null,"Title":"Forming answers from tuples by using Concat()","Type":null,"Width":null}],"5":[{"Query":"Select count(*) from Penna","Result":null,"Title":"Check how large is the Penna table","Type":null,"Width":null},{"Query":"Select * from Penna where Timestamp like '2020-11-05%' limit 10","Result":null,"Title":"Meaning of Penna table- through 10 tuples from 11-05-2020","Type":null,"Width":null},{"Query":"Select sum(Trump), sum(Biden) from Penna\nwhere Timestamp = (select max(Timestamp) from Penna)","Result":null,"Title":"Who won election according to Penna table (in parts of Pennsylvania)","Type":null,"Width":null},{"Query":"select precinct, sum(Trump) as Final_Trump_Vote, sum(Biden) as Final_Biden_Vote, if(sum(Biden)>sum(Trump), 'Biden won','Trump won') Result from Penna where Timestamp = (select Max(Timestamp) from Penna)\ngroup by precinct","Result":null,"Title":"Won by precinct","Type":null,"Width":null},{"Query":"select precinct, sum(totalvotes) as Votes from Penna\r\nwhere Timestamp = (select max(Timestamp) from Penna)\r\ngroup by precinct \r\norder by Votes desc\r\nlimit 1 ","Result":null,"Title":"Which precinct had the most counted votes?","Type":null,"Width":null},{"Query":"select precinct, sum(Trump) as TrumpVotes from Penna\r\nwhere Timestamp = (select max(Timestamp) from Penna)\r\ngroup by precinct \r\norder by TrumpVotes desc\r\nlimit 1 ","Result":null,"Title":"Which precinct had the most counted votes for Trump?","Type":null,"Width":null},{"Query":"SELECT DISTINCT 'Trump' as 'Who won Elton Voting Precinct' where \r\nEXISTS( select precinct, sum(Trump) as TrumpVotes, sum(Biden) as BidenVotes from Penna\r\nwhere precinct = 'Adams Township - Elton Voting Precinct' and Timestamp = (select max(Timestamp) from Penna)\r\ngroup by  precinct \r\nHaving (sum(Trump) > sum(Biden)))\r\nUNION\r\nSELECT DISTINCT 'Biden' as 'Who won Elton Voting Precinct' where \r\nEXISTS( select precinct, sum(Trump) as TrumpVotes, sum(Biden) as BidenVotes from Penna\r\nwhere precinct = 'Adams Township - Elton Voting Precinct' and Timestamp = (select max(Timestamp) from Penna)\r\ngroup by  precinct \r\nHaving (sum(Trump) < sum(Biden)));","Result":null,"Title":"Query returns who won Elton Voting Precinct - 'Trump\/Biden won Elton Voting Precinct'","Type":null,"Width":null},{"Query":"SELECT DISTINCT 'Trump' as 'Who won Hanover Precinct' where \r\nEXISTS( select precinct, sum(Trump) as TrumpVotes, sum(Biden) as BidenVotes from Penna\r\nwhere precinct = 'Hanover' and Timestamp = (select max(Timestamp) from Penna)\r\ngroup by  precinct \r\nHaving (sum(Trump) > sum(Biden)))\r\nUNION\r\nSELECT DISTINCT 'Biden' as 'Who won Hanover Precinct' where \r\nEXISTS( select precinct, sum(Trump) as TrumpVotes, sum(Biden) as BidenVotes from Penna\r\nwhere precinct = 'Hanover' and Timestamp = (select max(Timestamp) from Penna)\r\ngroup by  precinct \r\nHaving (sum(Trump) < sum(Biden)));","Result":null,"Title":"Query returns who won Hannover Voting Precinct - 'Trump\/Biden won Hannover Precinct'","Type":null,"Width":null},{"Query":"SELECT DISTINCT precinct, Timestamp\r\nFROM Penna\r\nWHERE totalvotes>0 AND Timestamp = (SELECT min(Timestamp) \r\n\t\t\t\t\t\t    FROM Penna\r\n\t\t\t\t\t\t    WHERE totalvotes>0)\r\n\t\t\t\t\t\t    limit 1","Result":null,"Title":"Show the earliest timestamp t when first vote was casted. Return also one of these precincts which got their first vote counted at t.","Type":null,"Width":null},{"Query":"Select count(distinct A.precinct) as 'How many precincts did Trump win'\nFrom\n(Select precinct\nFrom Penna\nGroup By precinct\nHaving Max(Trump)>Max(Biden)) as A;","Result":null,"Title":"Return how many precincts did Trump win?","Type":null,"Width":null},{"Query":"select* from Penna\nwhere precinct = 'Hanover'","Result":null,"Title":"Without Index","Type":null,"Width":null},{"Query":"select * from Penna1\nwhere precinct = 'Hanover' and Timestamp like '2020-11-06%'","Result":null,"Title":"With Index","Type":null,"Width":null},{"Query":"select * from Penna\nwhere precinct = 'Hanover' and Timestamp like '2020-11-06%'","Result":null,"Title":"Without Index","Type":null,"Width":null},{"Query":"select * from Penna1\nwhere precinct='Hanover' or precinct ='Adams Township - Elton Voting Precinct'","Result":null,"Title":"With Index","Type":null,"Width":null},{"Query":"select * from Penna\nwhere precinct='Hanover' or precinct ='Adams Township - Elton Voting Precinct'","Result":null,"Title":"Without Index ","Type":null,"Width":null},{"Query":"select EXISTS (select * from Penna p1, Penna p2\nwhere p1.precinct = p2.precinct and p1.Timestamp <p2.Timestamp and p1.Trump > p2.Trump) as Violation","Result":null,"Title":"Without index","Type":null,"Width":null},{"Query":"select EXISTS (select * from Penna1 p1, Penna1 p2\nwhere p1.precinct = p2.precinct and p1.Timestamp <p2.Timestamp and p1.Trump > p2.Trump) as Violation","Result":null,"Title":"With index","Type":null,"Width":null}],"6":[{"Query":"select * from Largenews limit 1","Result":null,"Title":"Largenews table - news articles and dates","Type":null,"Width":null},{"Query":"select * from Largenews where MATCH(content) AGAINST ('exclusive interviews with Will Power' IN BOOLEAN MODE) and content like '%exclusive interviews with Will Power%'","Result":null,"Title":"With full text index","Type":null,"Width":null},{"Query":"select content from Largenews1\nwhere content like '%exclusive interviews with Will Power%';\n","Result":null,"Title":"Without full text index ","Type":null,"Width":null}],"7":[{"Query":"update Sells1\nset price= price * 2\nwhere bar='Cabana' and beer='Budweiser';","Result":null,"Title":"Update price to double","Type":null,"Width":null},{"Query":"select price from Sells\nwhere bar='Cabana' and beer='Budweiser';","Result":null,"Title":"Verify BEFORE the update","Type":null,"Width":"50%"},{"Query":"select price from Sells1\nwhere bar='Cabana' and beer='Budweiser';","Result":null,"Title":"Verify the update AFTER","Type":null,"Width":"50%"},{"Query":"Delete from Frequents1 f\nwhere NOT EXISTS (select l.beer from Likes l, Sells s where f.drinker=l.drinker  and s.bar=f.bar)","Result":null,"Title":"Delete drinkers from bars that they frequent and these bars sell no beer they like","Type":null,"Width":null},{"Query":"Select distinct drinker from Frequents ","Result":null,"Title":"Verify Before the deletion","Type":null,"Width":"50%"},{"Query":"Select distinct drinker from  Frequents1","Result":null,"Title":"Verify After the deletion","Type":null,"Width":"50%"},{"Query":"Insert into Sells1 values ('Blue Angel', 'Okocim', 9);","Result":null,"Title":"Insert Okocim beer to Sells table at a price of 9 dollars.","Type":null,"Width":null}],"8":[{"Query":"db.Bars.find_one()","Result":null,"Title":"Find any one object in Bars collection","Type":"mongo","Width":null},{"Query":"db.Bars.insert_one({\"name\":\"old tavern bar\",\"city\":\"new brunswick\",\"phone\":\"5554443332\",\"food\":[{\"name\":\"cheeseburger\",\"price\":14},{\"name\":\"pizza\",\"price\":10}]})","Result":"[\n  {\n   \"acknowledged\" : true,\n   \"insertedId\" :\"636df17cf3f213b81bbf8735\"\n }\n]","Title":"Add new bar which serves only food (would not be possible to add in relational db","Type":"mongo","Width":null},{"Query":"db.Bars.update_one({\"name\":\"old tavern bar\"},{ \"$set\": { \"beers\":[{\"name\":\"Taj Mahal\",\"price\":7.3,\"happy_hour_price\":4.5}] }})","Result":"{ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }","Title":"Now let this bar also sell beer","Type":"mongo","Width":null},{"Query":"db.food.insert_one({\"name\":\"cheesburger\",\"calories\":500}) ","Result":"[\n  {\n   \"acknowledged\" : true,\n   \"insertedId\" :\"636df1c4f3f213b81bbf8739\"\n }\n]","Title":"Create new collection \"Foods\" - implicitely, no need for declaring it","Type":"mongo","Width":null},{"Query":"db.food.find()","Result":null,"Title":"Show object in collection food we just created","Type":"mongo","Width":null},{"Query":"db.Bars.find({ \"food\": { \"$exists\": \"true\" } }) ","Result":null,"Title":"Find objects with \"Food\" in it","Type":"mongo","Width":null},{"Query":"db.Drinkers.find({\"name\":\"Bob\"})","Result":null,"Title":"Find a drinker whose name is Bob","Type":"mongo","Width":null},{"Query":"db.Drinkers.find({\"name\": { \"$in\":[\"Justin\",\"John\"]}})","Result":null,"Title":"Find Drinker whose name are John or Justin","Type":"mongo","Width":null},{"Query":"db.Drinkers.find({},{ \"_id\": 0, \"name\": 1, \"history\": 1 })","Result":null,"Title":"Name and history of every drinker","Type":"mongo","Width":null},{"Query":"db.Bars.find( \n       {\"name\":\"Caravan\"}, \n       { \"beers\": { \"$elemMatch\": { \"Name\": \"Budweiser\" } },  \n         \"name\": 1,  \n         \"_id\": 0\n       })","Result":null,"Title":"What does Caravan bar charge for Budweiser? Mongo","Type":"mongo","Width":"50%"},{"Query":"SELECT price FROM Sells WHERE bar = 'Caravan' AND beer = 'Budweiser'","Result":null,"Title":"What does Caravan bar charge for Budweiser? - SQL","Type":null,"Width":"50%"},{"Query":"db.Drinkers.find({ \"phone\":{\"$regex\": \"^917-\"} } )","Result":null,"Title":" Drinkers with phone number from area code 917 - Mongo","Type":"mongo","Width":"50%"},{"Query":"SELECT name FROM Drinkers WHERE phone LIKE '917-%'","Result":null,"Title":" Drinkers with phone number from area code 917 - SQL","Type":null,"Width":"50%"},{"Query":"db.Drinkers.aggregate(\n[\n     {\"$project\": {\"_id\":0,\"name\":1,\n                 \"number_of_bars_visited\": {\"$size\": \"$history\"}\n                }\n     },\n     {\"$match\": {\"number_of_bars_visited\": {\"$gt\": 2}}}\n])","Result":null,"Title":"Drinkers who have visited more than 2 bars","Type":"mongo","Width":null},{"Query":"db.Drinkers.find({\"history.happy_hour\": {\"$nin\": [\"no\"]}})","Result":null,"Title":"Find the drinker and their visits during happy hour","Type":"mongo","Width":null},{"Query":"db.Bars.find({\"beers.Name\": {\"$all\": [\"Bud\", \"Blue Moon\"]}})","Result":null,"Title":"Find bars that sells both \"Bud\" and \"Blue Moon\"","Type":"mongo","Width":null},{"Query":"db.Bars.aggregate( [\n        {\n \"$addFields\": {\n  \"price_average\": {\n   \"$avg\": '$beers.Price'\n  }\n }\n   }] )","Result":null,"Title":"Find the average beer price at each bar Method 1","Type":"mongo","Width":null},{"Query":"db.Bars.aggregate([{\n \"$unwind\": '$beers'\n}, {\n \"$group\": {\n  \"_id\": '$name',\n  \"price_average\": {\n   \"$avg\": '$beers.Price'\n  }\n }\n}])","Result":null,"Title":"Find the average beer price at each bar Method 2\n","Type":"mongo","Width":null},{"Query":"db.Bars.aggregate([{\n    \"$unwind\": '$beers'\n}, {\n    \"$group\": {\n        \"_id\": '$name',\n        \"min\": {\n            \"$min\": {\n                \"$divide\": [\n                    '$beers.Happy_Hour_Price',\n                    '$beers.Price'\n                ]\n            }\n        }\n    }\n}])","Result":null,"Title":"Find the beer which has the largest discount during happy hour","Type":"mongo","Width":null},{"Query":"db.Penna.find_one()","Result":null,"Title":"Get one record from penna","Type":"mongo","Width":null},{"Query":"db.Bars.aggregate([{\"$project\" : {\"_id\" : 0, \"avr_price\" : {\"$avg\" : \"$beers.Price\"},\"name\":1}}]).sort({\"avr_price\":1})","Result":null,"Title":"Show the average price of beer sold by each bar.","Type":"mongo","Width":null},{"Query":"db.Bars.find({\"license\":{\"$regex\":\"^CA\"}})","Result":null,"Title":"Find a bar with a license plate starting with CA","Type":"mongo","Width":null},{"Query":"db.Drinkers.find({\"history\":{\"$elemMatch\":{\"bars\":\"Eulipia\",\"set_of_beers\":{\"$in\":[\"Gecko Grill\"]}}}})","Result":null,"Title":"Find the drinkers who have ever been to eulipia and have certain beer (Gecko Grill) ","Type":"mongo","Width":null},{"Query":"db.Drinkers.find({},{\"_id\":0,\"name\":1,\"history\":{\"$slice\":-1}})","Result":null,"Title":"Show the last historical event of each drinker","Type":"mongo","Width":null}],"9":[{"Query":"moody<-read.csv(\"https:\/\/raw.githubusercontent.com\/dev7796\/data101_tutorial\/main\/files\/dataset\/moody2020b.csv\") #web load\nplot(moody$participation,moody$score,ylab=\"score\",xlab=\"participation\",main=\" Participation vs Score\",col=\"red\")","Result":null,"Title":"Testing R code ","Type":"R","Width":null},{"Query":"moody<-read.csv(\"https:\/\/raw.githubusercontent.com\/dev7796\/data101_tutorial\/main\/files\/dataset\/moody2022.csv\")\n\n#Lets look at the length of the grade column \nlength(moody$Grade)","Result":null,"Title":"Testing r 2 code","Type":"R","Width":null},{"Query":"# moody<-read.csv(\"..\/files\/dataset\/moody2020b.csv\") #static Load\nmoody<-read.csv(\"https:\/\/raw.githubusercontent.com\/dev7796\/data101_tutorial\/main\/files\/dataset\/moody2020b.csv\") #web load\ncolors<- c('red','blue','cyan','yellow','green') # Assigning different colors to bars\n\n#lets make a table for the grades of students and counts of students for each Grade.\n\nt<-table(moody$grade)\n\n#once we have the table lets create a barplot for it.\n\nbarplot(t,xlab=\"Grade\",ylab=\"Number of Students\",col=colors,\n        main=\"Barplot for student grade distribution\",border=\"black\")","Result":null,"Title":"R code part 3","Type":"R","Width":null},{"Query":"moody<-read.csv(\"https:\/\/raw.githubusercontent.com\/dev7796\/data101_tutorial\/main\/files\/dataset\/moody2022.csv\")\ncolnames(moody)\nsummary(moody)\nunique(moody$Seniority)","Result":null,"Title":"Getting to know the data set, what collumns does the data frame have? Distributions of values","Type":"R","Width":null},{"Query":"moody<-read.csv(\"https:\/\/raw.githubusercontent.com\/dev7796\/data101_tutorial\/main\/files\/dataset\/moody2022.csv\")\nmean(moody[moody$Major=='Economics',]$GPA)","Result":null,"Title":"What is the mean GPA of Economics majors?","Type":"R","Width":null}],"10":[{"Query":"import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 5, 0.1);\ny = np.sin(x)\nplt.plot(x, y)\nplt.show()","Result":null,"Title":"Testing python code","Type":"Python","Width":null}]}}